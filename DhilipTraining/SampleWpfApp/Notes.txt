WPF stands for Windows presentation Framework. It is a new way of developing Windows Apps on new platforms of Windows like Win Vista, Win 7 and later versions. However it was very popular for developing apps on multiple platforms and devices of the Windows Editions. 
It is built on  DirectX technology. WinForms are based on Win32 APIs. WPF gives more graphical features compared to WinForms which follows the traditional Win32 API.  DirectX is based on COM Technology. DirectX uses a hardware called Graphics card to optimize the Graphics of the Application. However it completely monopolizes the graphics card. There by making other apps slow down. This is not suited for Desktop apps. WPF changes this. It has modified the DirectX to make it usable in a Desktop Environment. This makes DirectX share the Graphics Card resource among multiple apps that are running on ur os. 
DirectX is written in C++. There is a Interoperability code that converts the low level C++ APIs into C# Code. 
MilCore.dll is the C++ Code that allows DirectX to work on Desktop environment. Media Integration Layer Core is the library for converting DirectX to work on desktop envinronment.
WindowsBase.dll converts the Unmanaged Milcore to Managed Environment of .NET Framework. 
PresentationCore dll will give basic low level classes and components of WPF. These classes are the one that interact with the Milcore to create foundation for WPF Components. 
PresentationFramework Dll will contain the ready to use classes and components of WPF that programmers use to make their applications.

What is XAML?
XAML stands for eXtensible application markup language. It is an XML based language used for developing User Interfaces for WPF. The UI will now be an XML based file and the code behind will be C# file. C# file contains the event handling code and XAML will contain the User interface of UR Application. XML files are created using self descriptive Tags. The tags describe about the data associated with it.
The intension of XAML is to cleanly seperate the User Interface code and the Functionality code. The Functionality is developed in C# and the UI is developed using XAML. 

The controls of WPF will be placed in the Window in the form of Elements. There are 2 types of Controls in WPF:
Content Controls and Container Controls. Window is a content control. It can hold only one element in it.
Container elements will allow multiple controls to be placed in them on a pattern. This pattern is called Layout. Each layout comes with a pattern, based on which we use them in our WIndow. 

Command bindings are bindings done to Ur User interface elements with std commands of the Windows OS. There are 4 types of commands: Application Commands, Media Commands, Navigation Commands and Custom Commands. These commands will implement an interface called ICommand. The ICommand interface contain methods called Executed and OnExecute.Executed will be an event when the action occurs and OnExecute is one that is triggered before any execution happens.

Resources are external files that are used to enhance the look and the feel of the applicaion. it includes images, graphics, styles, triggers and data. They are made to bind with the elements to make the user interface attractive and informative. Assembly Resources and object resources. Assembly resources are the one that are used with building process of the Wpf app. All Xaml files are compiled and stored as assembly resources that are loaded with the process begins.
Object resources are one that are part of the UI and will be used like objects where U can have memory allocated based on the scope of the application. Here U could create the resource reference once and U can use them across the app at various point of app execution like classes and objects. Here too U have a scope. Application, Window, and Element. Examples are bitmapts, Images, styles, data of the objects, binding object. Anything that could be reused by creating it once and using it thro a key are called as object resources. 
Object resources are loaded into xaml in 2 ways: static and dynamic. static is used when U have declared the resource and using it. dynamic can be loaded at runtime or when it is required to be loaded.
Styles are similar to CSS for HTML. With Styles, U can group a set of properties and assign them to specific controls and will enhance the look and the feel of the control. They are created like resources only. Styles in WPF are another form of resources. 
U can create Styles are element level, Window level and Application level. When U want to have a common look and feel for all the elements of a type, then U should set it at the application level. For elements specific to a window U could do that at Window level. For even more specific elements, U could create a style within the element itself. This is the highest level of precedence. First preference will be to element, Window, Application. 
Styles will set properties with values and will be used by the perticular element. However, if U want to change the style at runtime based on some action, some value or some dependency of another element, we use triggers. Triggers are like event handling within XAML. With Triggers U could make UR app behave differently based on action performed by the user. There are 3 flavors: Property triggers, Event triggers and Data triggers. Normally these actions are done using code behind, but with triggers these things could be done thro xaml only. 
Dividing UR code into 3 parts:
Models: The data that U want to display or show to the user. 
Views: The way U want to present the model to the user. 
ViewModels: The plumbing work b/w the model and the View. It is a combination of some parts of View features and some parts of the model feature in one unit. 
This is popularly called as MVVM. 

Normal properties provided by C# does not have an ability to bind the data into the controls of WPF. WPF controls can only bind to Dependency properties. Dependency properties can be created only on dependency objects.